// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:yimabao/entities/tag_sync_entity.dart';
import 'package:yimabao/generated/json/tag_sync_entity_helper.dart';
import 'package:yimabao/entities/test_entity.dart';
import 'package:yimabao/generated/json/test_entity_helper.dart';
import 'package:yimabao/entities/login_entity.dart';
import 'package:yimabao/generated/json/login_entity_helper.dart';
import 'package:yimabao/entities/version_entity.dart';
import 'package:yimabao/generated/json/version_entity_helper.dart';
import 'package:yimabao/entities/is_login_entity.dart';
import 'package:yimabao/generated/json/is_login_entity_helper.dart';
import 'package:yimabao/entities/mark_sync_entity.dart';
import 'package:yimabao/generated/json/mark_sync_entity_helper.dart';
import 'package:yimabao/entities/cycle_entity.dart';
import 'package:yimabao/generated/json/cycle_entity_helper.dart';
import 'package:yimabao/entities/apple_info_entity.dart';
import 'package:yimabao/generated/json/apple_info_entity_helper.dart';
import 'package:yimabao/entities/login_sync_entity.dart';
import 'package:yimabao/generated/json/login_sync_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case TagSyncEntity:
				return tagSyncEntityFromJson(data as TagSyncEntity, json) as T;
			case TagSyncData:
				return tagSyncDataFromJson(data as TagSyncData, json) as T;
			case TestEntity:
				return testEntityFromJson(data as TestEntity, json) as T;
			case LoginEntity:
				return loginEntityFromJson(data as LoginEntity, json) as T;
			case LoginData:
				return loginDataFromJson(data as LoginData, json) as T;
			case VersionEntity:
				return versionEntityFromJson(data as VersionEntity, json) as T;
			case VersionData:
				return versionDataFromJson(data as VersionData, json) as T;
			case IsLoginEntity:
				return isLoginEntityFromJson(data as IsLoginEntity, json) as T;
			case IsLoginData:
				return isLoginDataFromJson(data as IsLoginData, json) as T;
			case MarkSyncEntity:
				return markSyncEntityFromJson(data as MarkSyncEntity, json) as T;
			case MarkSyncData:
				return markSyncDataFromJson(data as MarkSyncData, json) as T;
			case CycleEntity:
				return cycleEntityFromJson(data as CycleEntity, json) as T;
			case CycleData:
				return cycleDataFromJson(data as CycleData, json) as T;
			case AppleInfoEntity:
				return appleInfoEntityFromJson(data as AppleInfoEntity, json) as T;
			case AppleInfoResult:
				return appleInfoResultFromJson(data as AppleInfoResult, json) as T;
			case LoginSyncEntity:
				return loginSyncEntityFromJson(data as LoginSyncEntity, json) as T;
			case LoginSyncData:
				return loginSyncDataFromJson(data as LoginSyncData, json) as T;
			case LoginSyncDataData:
				return loginSyncDataDataFromJson(data as LoginSyncDataData, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case TagSyncEntity:
				return tagSyncEntityToJson(data as TagSyncEntity);
			case TagSyncData:
				return tagSyncDataToJson(data as TagSyncData);
			case TestEntity:
				return testEntityToJson(data as TestEntity);
			case LoginEntity:
				return loginEntityToJson(data as LoginEntity);
			case LoginData:
				return loginDataToJson(data as LoginData);
			case VersionEntity:
				return versionEntityToJson(data as VersionEntity);
			case VersionData:
				return versionDataToJson(data as VersionData);
			case IsLoginEntity:
				return isLoginEntityToJson(data as IsLoginEntity);
			case IsLoginData:
				return isLoginDataToJson(data as IsLoginData);
			case MarkSyncEntity:
				return markSyncEntityToJson(data as MarkSyncEntity);
			case MarkSyncData:
				return markSyncDataToJson(data as MarkSyncData);
			case CycleEntity:
				return cycleEntityToJson(data as CycleEntity);
			case CycleData:
				return cycleDataToJson(data as CycleData);
			case AppleInfoEntity:
				return appleInfoEntityToJson(data as AppleInfoEntity);
			case AppleInfoResult:
				return appleInfoResultToJson(data as AppleInfoResult);
			case LoginSyncEntity:
				return loginSyncEntityToJson(data as LoginSyncEntity);
			case LoginSyncData:
				return loginSyncDataToJson(data as LoginSyncData);
			case LoginSyncDataData:
				return loginSyncDataDataToJson(data as LoginSyncDataData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (TagSyncEntity).toString()){
			return TagSyncEntity().fromJson(json);
		}
		if(type == (TagSyncData).toString()){
			return TagSyncData().fromJson(json);
		}
		if(type == (TestEntity).toString()){
			return TestEntity().fromJson(json);
		}
		if(type == (LoginEntity).toString()){
			return LoginEntity().fromJson(json);
		}
		if(type == (LoginData).toString()){
			return LoginData().fromJson(json);
		}
		if(type == (VersionEntity).toString()){
			return VersionEntity().fromJson(json);
		}
		if(type == (VersionData).toString()){
			return VersionData().fromJson(json);
		}
		if(type == (IsLoginEntity).toString()){
			return IsLoginEntity().fromJson(json);
		}
		if(type == (IsLoginData).toString()){
			return IsLoginData().fromJson(json);
		}
		if(type == (MarkSyncEntity).toString()){
			return MarkSyncEntity().fromJson(json);
		}
		if(type == (MarkSyncData).toString()){
			return MarkSyncData().fromJson(json);
		}
		if(type == (CycleEntity).toString()){
			return CycleEntity().fromJson(json);
		}
		if(type == (CycleData).toString()){
			return CycleData().fromJson(json);
		}
		if(type == (AppleInfoEntity).toString()){
			return AppleInfoEntity().fromJson(json);
		}
		if(type == (AppleInfoResult).toString()){
			return AppleInfoResult().fromJson(json);
		}
		if(type == (LoginSyncEntity).toString()){
			return LoginSyncEntity().fromJson(json);
		}
		if(type == (LoginSyncData).toString()){
			return LoginSyncData().fromJson(json);
		}
		if(type == (LoginSyncDataData).toString()){
			return LoginSyncDataData().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<TagSyncEntity>[] is M){
			return data.map<TagSyncEntity>((e) => TagSyncEntity().fromJson(e)).toList() as M;
		}
		if(<TagSyncData>[] is M){
			return data.map<TagSyncData>((e) => TagSyncData().fromJson(e)).toList() as M;
		}
		if(<TestEntity>[] is M){
			return data.map<TestEntity>((e) => TestEntity().fromJson(e)).toList() as M;
		}
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((e) => LoginEntity().fromJson(e)).toList() as M;
		}
		if(<LoginData>[] is M){
			return data.map<LoginData>((e) => LoginData().fromJson(e)).toList() as M;
		}
		if(<VersionEntity>[] is M){
			return data.map<VersionEntity>((e) => VersionEntity().fromJson(e)).toList() as M;
		}
		if(<VersionData>[] is M){
			return data.map<VersionData>((e) => VersionData().fromJson(e)).toList() as M;
		}
		if(<IsLoginEntity>[] is M){
			return data.map<IsLoginEntity>((e) => IsLoginEntity().fromJson(e)).toList() as M;
		}
		if(<IsLoginData>[] is M){
			return data.map<IsLoginData>((e) => IsLoginData().fromJson(e)).toList() as M;
		}
		if(<MarkSyncEntity>[] is M){
			return data.map<MarkSyncEntity>((e) => MarkSyncEntity().fromJson(e)).toList() as M;
		}
		if(<MarkSyncData>[] is M){
			return data.map<MarkSyncData>((e) => MarkSyncData().fromJson(e)).toList() as M;
		}
		if(<CycleEntity>[] is M){
			return data.map<CycleEntity>((e) => CycleEntity().fromJson(e)).toList() as M;
		}
		if(<CycleData>[] is M){
			return data.map<CycleData>((e) => CycleData().fromJson(e)).toList() as M;
		}
		if(<AppleInfoEntity>[] is M){
			return data.map<AppleInfoEntity>((e) => AppleInfoEntity().fromJson(e)).toList() as M;
		}
		if(<AppleInfoResult>[] is M){
			return data.map<AppleInfoResult>((e) => AppleInfoResult().fromJson(e)).toList() as M;
		}
		if(<LoginSyncEntity>[] is M){
			return data.map<LoginSyncEntity>((e) => LoginSyncEntity().fromJson(e)).toList() as M;
		}
		if(<LoginSyncData>[] is M){
			return data.map<LoginSyncData>((e) => LoginSyncData().fromJson(e)).toList() as M;
		}
		if(<LoginSyncDataData>[] is M){
			return data.map<LoginSyncDataData>((e) => LoginSyncDataData().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}